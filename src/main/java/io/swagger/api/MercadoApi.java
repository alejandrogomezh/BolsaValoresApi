/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Mercado;
import io.swagger.annotations.*;
import io.swagger.model.Portafolio;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "mercado", description = "the mercado API")
@RequestMapping("/mercado")
public interface MercadoApi {

    @ApiOperation(value = "Agregar un mercado", nickname = "agregarMercado", notes = "Agregar un mercado", tags={ "administrador", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Recurso creado"),
        @ApiResponse(code = 400, message = "Parámetro inválido"),
        @ApiResponse(code = 409, message = "Recurso ya existente") })
    @RequestMapping(value = "/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Mercado> agregarMercado(@ApiParam(value = "Mercado a agregar"  )  @Valid @RequestBody Mercado mercado);


    @ApiOperation(value = "Buscar un mercado", nickname = "buscarMercado", notes = "Enviando un id válido retorna la información de un mercado ", response = Object.class, tags={ "administrador","emisor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Recurso obtenido", response = Object.class),
        @ApiResponse(code = 400, message = "Parámetro inválido") })
    @RequestMapping(value = "/{idMercado}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Mercado> buscarMercado(@ApiParam(value = "Id del mercado a buscar",required=true) @PathVariable("idMercado") String idMercado);


    @ApiOperation(value = "Eliminar un mercado", nickname = "eliminarMercado", notes = "Enviando un id válido se elimina el respectivo mercado ", tags={ "administrador", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Recurso eliminado"),
        @ApiResponse(code = 400, message = "Parámetro inválido") })
    @RequestMapping(value = "/{idMercado}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> eliminarMercado(@ApiParam(value = "Mercado a ser eliminado",required=true) @PathVariable("idMercado") String idMercado);

    @ApiOperation(value = "busca un listado de portafolio dado un mercado", nickname = "listarPortafolio", notes = " ", response = Object.class, tags={ "administrador",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "devolver el resultado obtenido", response = Object.class),
            @ApiResponse(code = 400, message = "parametro incorrecto") })
    @RequestMapping(value = "/{idMercado}/portafolios",
            produces = { "application/json" },
            method = RequestMethod.GET)
    List<Portafolio> listarPortafolio(@ApiParam(value = "id mercado a listar",required=true) @PathVariable("idMercado") String idMercado);
}
